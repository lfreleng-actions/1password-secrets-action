---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation
#
# Integration-only workflow: runs credentialed integration tests that require
# access to repository/organization secrets. This workflow is intentionally
# restricted to runs on `push` to `main` and manual `workflow_dispatch` so that
# secrets (such as OP_SERVICE_ACCOUNT_TOKEN) are available.

name: 'Integration Tests üîê'

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ['main']

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

permissions:
  contents: read

env:
  OP_SUPPRESS_SUMMARY: "true"

jobs:
  github-environment:
    name: "Check GitHub environment"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: "Verify required parameters"
        id: check-secrets
        run: |
          # Verify required parameters
          if [ -z "${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}" ]; then
            echo "token_available=false" >> "$GITHUB_OUTPUT"
            echo "Error: OP_SERVICE_ACCOUNT_TOKEN not available ‚ùå"
            exit 1
          else
            echo "OP_SERVICE_ACCOUNT_TOKEN available ‚úÖ"
            echo "token_available=true" >> "$GITHUB_OUTPUT"
          fi
                    # Verify required parameters
          if [ -z "${{ secrets.OP_VAULT }}" ]; then
            echo "Error: OP_VAULT not available ‚ùå"
            exit 1
          else
            echo "OP_VAULT available ‚úÖ"
          fi
          if [ -z "${{ secrets.OP_TEST_CREDENTIAL_1 }}" ]; then
            echo "Error: OP_TEST_CREDENTIAL_1 not available ‚ùå"
            exit 1
          else
            echo "OP_TEST_CREDENTIAL_1 available ‚úÖ"
          fi

          if [ -z "${{ secrets.OP_TEST_CREDENTIAL_2 }}" ]; then
            echo "Error: OP_TEST_CREDENTIAL_2 not available ‚ùå"
            exit 1
          else
            echo "OP_TEST_CREDENTIAL_2 available ‚úÖ"
          fi

  integration-tests:
    name: "Integration Tests"
    needs: [github-environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Setup Go"
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: "Verify Go version matches matrix"
        run: |
          # Verify Go version matches matrix
          echo "Expected Go version: ${{ matrix.go-version }}"
          echo "Actual Go version: $(go version)"
          if ! go version | grep -q "go${{ matrix.go-version }}"; then
            echo "ERROR: Go version mismatch!"
            echo "Expected: go${{ matrix.go-version }}"
            echo "Actual: $(go version)"
            exit 1
          fi
          echo "‚úì Go version verification passed"

      - name: "Debug module setup"
        run: |
          # Debug module setup
          echo "=== Integration Test Module Debug ==="
          pwd
          go version
          go list -m
          go mod download
          go mod verify
          go list ./...

      - name: "Build main binary"
        run: |
          # Build main binary
          echo "=== Building main binary ==="
          go mod tidy
          go build -v -o op-secrets-action ./cmd/op-secrets-action

      - name: "Run integration tests"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OP_USER_ID: ${{ secrets.OP_USER_ID }}
          OP_VAULT: ${{ secrets.OP_VAULT }}
          OP_TEST_CREDENTIAL_1: ${{ secrets.OP_TEST_CREDENTIAL_1 }}
          OP_TEST_CREDENTIAL_2: ${{ secrets.OP_TEST_CREDENTIAL_2 }}
        run: |
          # Run integration tests
          ./tests/scripts/run-integration-tests.sh -s integration -v

  test-action-smoke:
    name: "Live Credentials Smoke Test"
    needs: [github-environment]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Test single secret retrieval (live credentials)"
        id: single-secret
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ secrets.OP_VAULT }}
          record: "${{ secrets.OP_TEST_CREDENTIAL_1 }}/password"
          debug: false

      - name: "Verify live secret retrieval"
        run: |
          # Verify live secret retrieval
          if [[ -z "${{ steps.single-secret.outputs.value }}" ]]; then
            echo "Error: Live secret retrieval failed"
            exit 1
          fi

          # Calculate SHA1 of retrieved value for verification
          retrieved_sha1=$(echo -n "${{ steps.single-secret.outputs.value }}" | sha1sum | cut -d' ' -f1)
          expected_sha1="a910db944e927d2af1276c4f1b806800f5e6654d"

          if [[ "$retrieved_sha1" == "$expected_sha1" ]]; then
            echo "‚úÖ Live credentials smoke test passed - secret retrieval working"
          else
            echo "Error: SHA1 mismatch. Expected: $expected_sha1, Got: $retrieved_sha1"
            exit 1
          fi

      - name: "Test multiple secrets (live credentials)"
        id: multiple-secrets
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ secrets.OP_VAULT }}
          record: |
            {
              "username": "${{ secrets.OP_TEST_CREDENTIAL_1 }}/username",
              "password": "${{ secrets.OP_TEST_CREDENTIAL_1 }}/password"
            }
          debug: false

      - name: "Verify multiple secrets retrieval"
        run: |
          # Verify multiple secrets retrieval
          if [[ "${{ steps.multiple-secrets.outputs.secrets_count }}" != "2" ]]; then
            echo "Error: Expected 2 secrets, got ${{ steps.multiple-secrets.outputs.secrets_count }}"
            exit 1
          fi
          echo "‚úÖ Live credentials multiple secrets test passed"
          echo "üîç Cross-validation summary:"


          echo "  - Multiple credential retrieval: ‚úÖ Working"

          echo "‚úÖ All credential validation tests passed successfully"

  test-return-types-smoke:
    name: "Return Types Smoke Test"
    needs: [github-environment]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Test output return type (live credentials)"
        id: output-test
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ secrets.OP_VAULT }}
          record: "${{ secrets.OP_TEST_CREDENTIAL_1 }}/username"
          return_type: "output"
          debug: false

      - name: "Verify output return type"
        run: |
          if [[ -z "${{ steps.output-test.outputs.value }}" ]]; then
            echo "Error: Output return type test failed"
            exit 1
          fi
          echo "‚úÖ Live credentials return type test passed"

  test-live-error-handling:
    name: "Live Error Handling Test"
    needs: [github-environment]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Test invalid vault with live credentials"
        id: invalid-vault
        uses: ./
        continue-on-error: true
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: "NonExistentVault12345"
          record: "${{ secrets.OP_TEST_CREDENTIAL_1 }}/password"
          debug: false

      - name: "Verify live error handling"
        run: |
          # Verify live error handling
          if [[ "${{ steps.invalid-vault.outcome }}" != "failure" ]]; then
            echo "Error: Expected failure for invalid vault, but got: ${{ steps.invalid-vault.outcome }}"
            exit 1
          fi
          echo "‚úÖ Live error handling test passed"

  test-live-performance:
    name: "Live Performance Tests"
    needs: [github-environment]
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Test single secret performance"
        id: perf-single
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ secrets.OP_VAULT }}
          record: "${{ secrets.OP_TEST_CREDENTIAL_1 }}/password"
          debug: true

      - name: "Measure single secret time"
        run: |
          # Measure single secret time
          START_TIME=$(date +%s%N)
          echo "Single secret retrieval completed"
          END_TIME=$(date +%s%N)
          DURATION=$(( (END_TIME - START_TIME) / 1000000 ))
          echo "Single secret duration: ${DURATION}ms"
          if [[ $DURATION -gt 5000 ]]; then
            echo "Warning: Single secret took longer than 5 seconds"
          fi

      - name: "Test multiple secrets performance"
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ secrets.OP_VAULT }}
          record: |
            {
              "user1": "${{ secrets.OP_TEST_CREDENTIAL_1 }}/username",
              "pass1": "${{ secrets.OP_TEST_CREDENTIAL_1 }}/password"
            }
          max_concurrency: 3
          debug: true

      - name: "Measure multiple secrets time"
        run: |
          # Measure multiple secrets time
          echo "Multiple secrets retrieval completed"
          echo "‚úÖ Performance tests completed"

  test-live-security:
    name: "Live Security Smoke Test"
    needs: [github-environment]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Test secret masking with live credentials"
        id: secret-masking
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ secrets.OP_VAULT }}
          record: "${{ secrets.OP_TEST_CREDENTIAL_1 }}/password"
          debug: false

      - name: "Verify live secret masking"
        run: |
          # Verify live secret masking
          if [[ -z "${{ steps.secret-masking.outputs.value }}" ]]; then
            echo "Error: Secret masking test failed"
            exit 1
          fi
          echo "‚úÖ Live secret masking test passed"

  test-live-comprehensive:
    name: "Live Comprehensive Test"
    needs: [github-environment, test-action-smoke, test-return-types-smoke, test-live-error-handling]

    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Test complex workflow scenario"
        id: complex
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ secrets.OP_VAULT }}
          record: |
            {
              "database_user": "${{ secrets.OP_TEST_CREDENTIAL_1 }}/username",
              "database_pass": "${{ secrets.OP_TEST_CREDENTIAL_1 }}/password"
            }
          return_type: "both"
          cache_enabled: true
          max_concurrency: 1
          debug: true

      - name: "Use retrieved secrets in validation step"
        run: |
          # Use retrieved secrets in mock deployment
          echo "Mock deployment using retrieved secrets..."
          echo "Secrets Count: ${{ steps.complex.outputs.secrets_count }}"
          if [[ "${{ steps.complex.outputs.secrets_count }}" != "2" ]]; then
            echo "Error: Expected 2 secrets, got ${{ steps.complex.outputs.secrets_count }}"
            exit 1
          fi
          echo "‚úÖ Complex workflow test successful"

  performance-tests:
    name: "Performance Tests"
    needs: [github-environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Setup Go"
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: "Verify Go version matches matrix"
        run: |
          # Verify Go version matches matrix
          echo "Expected Go version: ${{ matrix.go-version }}"
          echo "Actual Go version: $(go version)"
          if ! go version | grep -q "go${{ matrix.go-version }}"; then
            echo "ERROR: Go version mismatch!"
            echo "Expected: go${{ matrix.go-version }}"
            echo "Actual: $(go version)"
            exit 1
          fi
          echo "‚úì Go version verification passed"

      - name: "Verify performance tests compile"
        run: |
          # Verify performance tests compile
          go test -c -tags=performance ./tests/performance/...

      - name: "Install benchstat tool"
        run: |
          # Install benchstat tool
          go install golang.org/x/perf/cmd/benchstat@latest

      - name: "Run performance tests"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OP_USER_ID: ${{ secrets.OP_USER_ID }}
          OP_VAULT: ${{ secrets.OP_VAULT }}
          OP_TEST_CREDENTIAL_1: ${{ secrets.OP_TEST_CREDENTIAL_1 }}
          OP_TEST_CREDENTIAL_2: ${{ secrets.OP_TEST_CREDENTIAL_2 }}
        run: |
          # Run performance tests
          ./tests/scripts/run-performance-benchmarks.sh -v

      - name: "Upload performance reports"
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: performance-reports-go-${{ matrix.go-version }}
          path: |
            test-reports/performance/**
            ./**/*bench*.out
            ./**/*performance*.log
            ./**/*performance*.json

  security-tests:
    name: "Security Tests"
    needs: [github-environment]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Setup Go"
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: "Verify Go version matches matrix"
        run: |
          # Verify Go version matches matrix
          echo "Expected Go version: ${{ matrix.go-version }}"
          echo "Actual Go version: $(go version)"
          if ! go version | grep -q "go${{ matrix.go-version }}"; then
            echo "ERROR: Go version mismatch!"
            echo "Expected: go${{ matrix.go-version }}"
            echo "Actual: $(go version)"
            exit 1
          fi
          echo "‚úì Go version verification passed"

      - name: "Run security tests"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OP_USER_ID: ${{ secrets.OP_USER_ID }}
        run: |
          # Run security tests
          echo "Note: Static vulnerability and security scans (govulncheck, gosec) run in testing.yaml"
          go test -v -timeout=10m -tags=security ./tests/security/...

  integration-summary:
    name: "Integration Summary"
    runs-on: ubuntu-latest
    needs: [
      github-environment,
      integration-tests,
      test-action-smoke,
      test-return-types-smoke,
      test-live-error-handling,
      test-live-performance,
      test-live-security,
      test-live-comprehensive,
      performance-tests,
      security-tests
    ]
    if: always()
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: "Generate integration summary"
        run: |
          # Generate integration summary
          {
            echo "# üîë Integration Testing Results"
            echo ""
            echo "| Suite | Status | Notes |"
            echo "|-------|--------|-------|"
            status_env="${{ needs.github-environment.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
            echo "| Environment Check | $status_env | GitHub secrets validation |"
            status_int="${{ needs.integration-tests.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
            echo "| Integration Tests | $status_int | Go integration suite |"
            status_smoke="${{ needs.test-action-smoke.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
            echo "| Live Credentials Smoke | $status_smoke | Single and multiple secret retrieval |"
            status_return="${{ needs.test-return-types-smoke.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
            echo "| Return Type Smoke | $status_return | Output/both modes |"
            status_error="${{ needs.test-live-error-handling.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
            echo "| Live Error Handling | $status_error | Invalid vault tests |"
            if [[ "${{ needs.test-live-performance.result }}" == "success" ]]; then
              perf_status="‚úÖ PASS"
            elif [[ "${{ needs.test-live-performance.result }}" == "skipped" ]]; then
              perf_status="‚è≠Ô∏è SKIP"
            else
              perf_status="‚ùå FAIL"
            fi
            echo "| Live Performance | $perf_status | Timing benchmarks |"
            if [[ "${{ needs.test-live-security.result }}" == "success" ]]; then
              sec_status="‚úÖ PASS"
            elif [[ "${{ needs.test-live-security.result }}" == "skipped" ]]; then
              sec_status="‚è≠Ô∏è SKIP"
            else
              sec_status="‚ùå FAIL"
            fi
            echo "| Live Security | $sec_status | Secret masking |"
            comp_status="${{ needs.test-live-comprehensive.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
            echo "| Live Comprehensive | $comp_status | End-to-end workflow |"
            if [[ "${{ needs.performance-tests.result }}" == "success" ]]; then
              go_perf_status="‚úÖ PASS"
            elif [[ "${{ needs.performance-tests.result }}" == "skipped" ]]; then
              go_perf_status="‚è≠Ô∏è SKIP"
            else
              go_perf_status="‚ùå FAIL"
            fi
            echo "| Performance (Go) | $go_perf_status | Credentialed benchmarks |"
            if [[ "${{ needs.security-tests.result }}" == "success" ]]; then
              go_sec_status="‚úÖ PASS"
            elif [[ "${{ needs.security-tests.result }}" == "skipped" ]]; then
              go_sec_status="‚è≠Ô∏è SKIP"
            else
              go_sec_status="‚ùå FAIL"
            fi
            echo "| Security (Go) | $go_sec_status | Vulnerability scanning |"
            echo ""

            # Calculate pass rate for core integration tests
            passed=0
            total=8  # Core integration tests (excluding optional performance/security)

            if [[ "${{ needs.test-action-smoke.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi
            if [[ "${{ needs.test-return-types-smoke.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi
            if [[ "${{ needs.test-live-error-handling.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi
            if [[ "${{ needs.test-live-performance.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi
            if [[ "${{ needs.test-live-security.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi
            if [[ "${{ needs.test-live-comprehensive.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi
            if [[ "${{ needs.github-environment.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi
            if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
              passed=$((passed + 1))
            fi

            if [[ $passed -eq $total ]]; then
              echo "## üéâ All Core Integration Tests Passed ($passed/$total)"
              echo ""
              echo "**Status:** Ready for production deployment"
            else
              echo "## ‚ùå Some Integration Tests Failed ($passed/$total)"
              echo ""
              echo "**Action Required:** Fix failing integration tests before deployment"
            fi

            echo ""
            echo "---"
            echo "*Integration tests validate real 1Password credential retrieval and action behavior*"
          } >> "$GITHUB_STEP_SUMMARY"
